# 2.1序列表述
# 2.2通用的序列操作
# greeting = 'hello'
# >>> edward = ['Edward Gumby',42]
# >>> edward = ['Edward Gumby',42]
# >>> join = ['John Smith',50]
# >>> database = [edward,join]
# >>> database
# [['Edward Gumby', 42], ['John Smith', 50]]
# >>> greet = 'Hello'
# >>> greet[0]
# 'H'
# months = [
#     'Januart',
#     'February',
#     'March',
#     'April',
#     'May',
#     'June',
#     'July',
#     'August',
#     'September',
#     'October',
#     'November',
#     'December'
#
#
# ]
#
# endings = ['st','nd','rd'] + 17*['th'] \
#         +['st','nd','rd'] +7*['th'] \
#         +['st']
# year = input('Year:')
# mouth = input('Mouth(1-12):')
# day= input('Day (1-31):')
# month_number = int(mouth)
# day_number = int(day)
# mouth_name = months[month_number-1]
# ordinal = day + endings[day_number-1]
# print(mouth_name + ''+ordinal + ',' + year)
# 切片
# tag = '<a href ="http:www.python.org">Python web site</a>'
#
# numbers = [1,2,3,4,5,6,7,8,9,10]
# numbers[7:10]
# number[-3:0]
# number[:3]
# numbers[:3]
# numbers[:]


#操作示例
# url = input('Please enter the URL:')
# domain = url[11:-4]
# print("Domain name:" + domain)
# 如果步长为正，第一个数从左向右增加步长，到小于第二个数。如果步长为负数，从右向左，最后一个数要大于中间的数字
#
# 序列相加,相乘
#
# [1,2,3] + [4,5,6]
# [42]*10

# sentence = input('sentence:')
# screen_width = 80
# text_width =len(sentence)
# box_width = text_width + 6
# left_margin = (screen_width - box_width) // 2
#
# print()
# print(' ' * left_margin + '+'   + '-' * (box_width-2)  +   '+')
# print(' ' * left_margin + '|  ' + ' ' * text_width     + '  |')
# print(' ' * left_margin + '|' +    sentence + '|')
# print(' ' * left_margin + '|  ' + ' ' * text_width     + '  |')
# print(' ' * left_margin + '+'   + '-' * (box_width-2)  +   '+')
# print()
#
# # 布尔运算
# #检查用户名和PIN码
# database = [
#     ['albert','1234'],
#     ['blbert', '2234'],
#     ['clbert', '3234'],
#     ['debert', '4234'],
# ]
# username = input('User name:')
# pin = input('PIN code:')
#
# if [username,pin] in database: print('Access granted')
长度，最小值和最大值
numbers = [100,34,678]
len(numbers)  max(numbers),min(numbers)
列表
函数list
list('hello')

列表的基本操作 ：给元素赋值
x = [1,1,1]
x[1] = 2
print(x)
#不能给不存在的元素赋值

删除元素
>>> names = ['Alice','Beth','Cecil','Dee-Dee','Earl']
>>> del names[2]
>>> names
['Alice', 'Beth', 'Dee-Dee', 'Earl']
给切片赋值


>>> numbers = [1,5]
>>> numbers[1:1] = [2,3,4]
>>> numbers
[1, 2, 3, 4, 5]
列表方法
object.method(argument)
1.append
>>> lst = [1,2,3]
>>> lst.append(4)
>>> lst
[1, 2, 3, 4]

2.clear
>>> lst[:] = []
>>> lst
[]
3.copy
>>> a = [1,2,3]
>>> b = a
>>> b[1] = 4
>>> a
[1, 4, 3]
4.count
>>> ['to','be','or','not','to','be'].count('to')#计算指定元素出现了几次
2
5.extend
将多个值附加到列表末尾
>>> a = [1,2,3]
>>> b = [4,5,6]
>>> a.extend(b)
>>> a
[1, 2, 3, 4, 5, 6]
>>> a + b
[1, 2, 3, 4, 5, 6]
>>> a
[1, 2, 3]#  结果相似但是这里的a并没有被修改,也能用a = a + b实现效果
6.index
>>> knights = ['We','are','knights','who','say','ni']
>>> knights.index('who')
7.insert
>>> numbers = [1,2,3,4,5,6,7]
>>> numbers.insert(3,'four')
>>> numbers
[1, 2, 3, 'four', 4, 5, 6, 7]
>>> numbers[3:3] = ['four']
>>> numbers
[1, 2, 3, 'four', 'four', 4, 5, 6, 7]

8.pop
从列表中删除一个元素，并返回这个元素,是唯一一个修改列表又返回一个非None值的列表方法
x = [1,2,3]

>>> x = [1,2,3]
>>> x.append(x.pop())
>>> x
[1, 2, 3]
>>> x.pop()

9.用于删除第一个为指定值的元素
>>> x = ['to','be','or','not','to','be']
>>> x.remove('be')
>>> x
['to', 'or', 'not', 'to', 'be']
不能删除列表中没有的值
10.reverse
['to', 'or', 'not', 'to', 'be']
>>> x = [1,2,3]
>>> x.reverse()
>>> x
[3, 2, 1]
#修改但是不返回任何值
11.sort
对于列表就地排序，从小到大的排序
x = [4,6,2,1,7,9]
>>> y=x # x 和y指向同一个列表
>>> x
[4, 6, 2, 1, 7, 9]
>>> y.sort()
>>> x

12高级排序
x = ['aardvark','abalone','acme','add',aerate]
>>> x.sort(key = len)
>>> x
['add', 'acme', 'aerate', 'abalone', 'aardvark']
根据长度进行排序
>>> x.sort(reverse=True)
>>> x
[9, 7, 6, 4, 2, 1]

元组：不可修改的序列
一个值的元组需要添加逗号
>>> 3 * (40 +2)
126
>>> 3 * (40 +2,)
(42, 42, 42)

#加逗号的对比
#tuple
>>> 3 * (40 +2,)
(42, 42, 42)
>>> tuple([1,2,3])
(1, 2, 3)
>>> tuple('a,b,c')
('a', ',', 'b', ',', 'c')
>>> touple((1,2,3))
